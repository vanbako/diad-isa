- About
I'm creating a diad (24 bit) 5-stage RISC microarchitecture core
The main goal is to keep the pipeline as simple as possible and to avoid stalls where possible
Toolchain is Vivado Lab Edition 2024.2, language verilog

- Details
Board: OrangeCrab or ULX3S
instructions, all memories, (GP) general purpose registers, (SSP) shadow stack pointer, (LR) link register, (PC) program counter, (IR) immediate register are diad (24 bit) in size
floating points are not needed yet. They are for future extension
no branch prediction, no out-of-order execution, no speculative execution, no interrupts, no exceptions, no cache, no TLB, no MMU
no instruction set architecture yet, only microarchitecture
Use handshake signals (like ready/valid) between stages to allow stages to indicate when they can accept new data.
No multi-cycle instructions like mul, div and mod yet
Each stage has its own local hazard or control logic that communicates with adjacent stages.
Use the built-in synchronous Block RAM (BRAM) for both instruction and data memories, single-ported. Make sure to use a one-clock delay (fetch, mem & wb stages)
Memory initialisation is with a bootloader at runtime
No memory controller yet

- Instruction format
24 bit (diad) total, only those needed for the instruction are coded
[23-16] OPC opcode
[15-12] CC jump/branch condition code (0 = RA, 1 = EQ, 2 = NE, 3 = LT, 4 = GT, 5 = LE, 6 = GE)
[15-12] TGT target general purpose register (16x GP)
[15-12] TGT target special register (0 = FL, 1 = LR, 2 = IR, 3 = SSP, f = PC)
[11-8]  SRC source general purpose register (16x GP)
[11-8]  SRC source special register (0 = FL, 1 = LR, 2 = IR, 3 = SSP, f = PC)
[11-0]  IMM immediate value (12 bit) (goes to upper 12 bits of IR with the LUI instruction, lower 12 bits for all other instructions)
[7-0]   IMMsr immediate value (8 bit) (lower 8 bits for SRJCC instruction)
unused for the instruction:
[x-y]   RSV reserved, must be all 0 (for the moment not checked, a check must be implemented when implementing interrupts where it should generate an illegal instruction interrupt if RSV bits are not 0)

Both general purpose and special registers use the same bits in the instruction format
Regular instructions use general purpose registers, special instructions (SRMOV, SRBCC) use special registers. This will be handled in the decode stage.

Branch condition codes use some of the same bits as TGT, as TGT is not used in branching. This will be handled in the decode stage.

i after the instruction means immediate value (upper from IR and lower from IMM)
s after the instruction means signed operation
is after the instruction means signed immediate operation (sign extended immediate, only lower 12 bits of immediate are used, upper 12 bits are ignored)

In the assembly language, first operand is source, second operand is target.

The move full immediate below is used as the upper immediate from IR and the lower immediate from the instruction IMM.

NOP (no operation)
HLT (halt)
LUI #imm (load upper immediate)
MOV Rs, Rt (move)
MOVi #imm, Rt (move full immediate)
ADD Rs, Rt (add)
ADDi #imm, Rt (add full immediate)
ADDs Rs, Rt	(add signed)
ADDis #imm, Rt (add sign-extended 12 bit immediate signed)
SUB Rs, Rt (subtract)
SUBi #imm, Rt (subtract full immediate)
SUBs Rs, Rt	(subtract signed)
SUBis #imm, Rt (subtract sign-extended 12 bit immediate)
NOT Rt (bitwise not)
AND Rs, Rt (bitwise and)
ANDi #imm, Rt (bitwise and full immediate)
OR Rs, Rt (bitwise or)
ORi #imm, Rt (bitwise or full immediate)
XOR Rs, Rt (bitwise xor)
XORi #imm, Rt (bitwise xor full immediate)
SHL Rs, Rt (shift left)
SHLi #imm, Rt (shift left immediate, only lower 5 bits of the immediate are used)
SHR Rs, Rt (shift right)
SHRi #imm, Rt (shift right immediate, only lower 5 bits of the immediate are used)
SHRs Rs, Rt (shift right signed)
SHRis #imm, Rt (shift right signed immediate, only lower 5 bits of the immediate are used)
CMP Rs, Rt (compare)
CMPi #imm, Rt (compare full immediate)
CMPs Rs, Rt (compare signed)
CMPis #imm, Rt (compare signed sign-extended 12 bit immediate)
JCC Rs (jump condition code, absolute address) (jump if condition is met)
JCCi #imm (jump condition code full immediate, absolute address) (jump if condition is met)
BCCs Rs (branch condition code, relative to pc) (branch if condition is met)
BCCis #imm (branch condition code immediate signed, relative to pc only lower 12 bits of immediate) (branch if condition is met)
LD (Rs), Rt (load from data memory)
ST Rs, (Rt) (store Rs to data memory at address in Rt)
STi #imm, (Rt) (store full immediate to data memory at address in Rt)
STis #imm, (Rt) (store signed sign-extended 12 bit immediate to data memory at address in Rt)
SRMOV PC, LR (store pc in link register)
SRJCC LR+#imm (jump condition code to link register with immediate, only lower 8 bits of immediate are used) (jump if condition is met)

- Pipeline Stages
1. IA/IF: Instruction Address & Fetch
2. ID:    Instruction Decode
3. EX:    Execute
4. MA/MO: Memory Address & Operation
5. RA/RO: Register Address & Operation

- General purpose registers
0-15 Rx : general purpose

- special registers
PC  : program counter
LR  : link register
IR  : immediate register
SSP : shadow stack pointer (not used yet)
FL  : flag register
	0  Z zero
	1  N negative
	2  C carry
	3  V overflow

- signals
	reset

- memories
flash (Basys 3 Artix-7 FPGA trainer board)
instruction:
	4096 diads (24 bits) in size, 24 bit address space
	read-only during pipeline operation (BRAM in Artix-7)
data:
	4096 diads (24 bits) in size, 24 bit address space
	read-write (BRAM in Artix-7)

- modules
testbench
diad
	reggp
	regflag
	reglr
	meminstr
	memdata
	hazardunit
    stage1ia
    stage1if
    stage2id
    stage3ex
    stage4ma
    stage4mo
    stage5wb

Hazards
- Read After Write Hazards
- Control Hazards
